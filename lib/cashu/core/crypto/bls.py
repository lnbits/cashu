import os
import time

from blspy import AugSchemeMPL, G1Element, G2Element, PrivateKey

# 32 randomly generated bytes
seed: bytes = os.urandom(32)

# normal signature

sk: PrivateKey = AugSchemeMPL.key_gen(seed)
pk: G1Element = sk.get_g1()

message: bytes = bytes([1, 2, 3, 4, 5])  # type: ignore
print("signing")
now = time.time()

signature: G2Element = AugSchemeMPL.sign(sk, message)  # type: ignore
print(f"took {time.time()-now}")

print("verifying")
now = time.time()
# Verify the signature
ok: bool = AugSchemeMPL.verify(pk, message, signature)
assert ok
print(f"took {time.time()-now}")

# BDHKE

from blspy import AugSchemeMPL, G1Element, G2Element, PrivateKey


def blind_message(msg: G1Element, blinding_key: PrivateKey) -> G1Element:
    blinding_factor = blinding_key.get_g1()
    blinded_msg = msg + blinding_factor
    return blinded_msg


# mint
a: PrivateKey = AugSchemeMPL.key_gen(seed)
A: G1Element = a.get_g1()


# step1_alice
def step1_alice(msg: PrivateKey, r: PrivateKey):
    Y: G1Element = msg.get_g1()
    B_: G1Element = blind_message(Y, r)
    return B_, r


def step2_bob(B_: G1Element, a: PrivateKey):
    C_: G1Element = B_ * a
    return C_


r: PrivateKey = AugSchemeMPL.key_gen(os.urandom(32))
msg: PrivateKey = AugSchemeMPL.key_gen(os.urandom(32))
B_ = step1_alice(msg, r)
print(B_)

C_ = step2_bob(B_[0], a)
print(C_)


# print(dir(AugSchemeMPL))
